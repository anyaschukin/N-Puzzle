#########
# TO DO #
#########

ARCHITECTURE
{x} organize src files -> GO-style
{x} be able to 'go build ...'
{x} store useful functions in new Golang library (filterUnique)

PARSING
{x} EITHER file OR flags
{ } print usage
{x} filter out negative numbers
{x} filter out floats
{x} filter out duplicates   ... should these be admissible ??
{x} leave empty space (0) in random board generation
{ } are both row and col between 0 and (n - 1) ?

SOLVER
{ } test IsSolvable
{x} Neighboring boards: generate a board per move
{ } move pieces around the board
{x} how do I know if I am at the goal state?
{ } bloom filter
{ } implement trees, priority queue, search algo
{} MUST: priority queue, A*, 3 heuristics, closed set (checks if node is currently in the set)
{} MUST: greed search, uniform cost
 
ALGO
{x} priority queue?
{ } how to tell if a node has been visited before? Visited set?
{ } Must: 3 heuristic functions, including Manhattan-distance
{ } Others: A-Star, IDA-Star


OPTIMIZING
{ } Define variables as close to their usage as possible (prevent extra variables declared)
{ } When considering the neighbors of a search node, don't enqueue a neighbor if its board is the same as the board of the predecessor search node.